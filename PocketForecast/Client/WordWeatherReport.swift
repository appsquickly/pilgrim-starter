/*
 The MIT License (MIT)

 Copyright (c) 2016-2020 The Contributors

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in all
 copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 SOFTWARE.
 */

import Foundation

/**
 * An intermediary set of structures representing the WorldWeatherOnline json response. We'll use this to transform to
 * our local WeatherReport. Generated by: https://app.quicktype.io/
 */
struct WorldWeatherReport: Codable {
    let data: DataClass
}

// MARK: - DataClass
struct DataClass: Codable {
    let error: [ReportError]?
    let climateAverages: [ClimateAverage]?
    let currentCondition: [CurrentCondition]?
    let request: [Request]?
    let weather: [WeatherElement]?

    enum CodingKeys: String, CodingKey {
        case error
        case climateAverages = "ClimateAverages"
        case currentCondition = "current_condition"
        case request, weather
    }
}

// MARK: - ClimateAverage
struct ClimateAverage: Codable {
    let month: [Month]?
}

// MARK: - Month
struct Month: Codable {
    let avgWindSpeedMph, avgMonthlyRainfall, maxWindSpeedKnots, avgWindGustKnots: String?
    let avgDailyRainfall, avgFogDays, avgMinTempF, avgMinTemp: String?
    let avgMaxTemp, avgPressureMB, avgWindGustKmph, avgSnowDays: String?
    let avgThunderDays, index, avgPressureInch, avgSunHour: String?
    let maxWindSpeedMph, absMinTempF, name, avgTempF: String?
    let avgDailyRainfallInch, avgHumidity, maxWindSpeedMS, avgMaxTempF: String?
    let avgWindSpeedKnots, avgWindSpeedMS, avgMonthlyRainfallInch, avgCloud: String?
    let avgRainDays, avgWindGustMph, absMinTemp, avgTemp: String?
    let avgWindGustMS, avgVisKM, absMaxTemp, avgDryDays: String?
    let maxWindSpeedKmph, absMaxTempF, avgWindSpeedKmph, avgUVIndex: String?
    let avgVisMiles: String?

    enum CodingKeys: String, CodingKey {
        case avgWindSpeedMph = "avgWindSpeed_mph"
        case avgMonthlyRainfall
        case maxWindSpeedKnots = "maxWindSpeed_knots"
        case avgWindGustKnots = "avgWindGust_knots"
        case avgDailyRainfall, avgFogDays
        case avgMinTempF = "avgMinTemp_F"
        case avgMinTemp, avgMaxTemp
        case avgPressureMB = "avgPressure_mb"
        case avgWindGustKmph = "avgWindGust_kmph"
        case avgSnowDays, avgThunderDays, index
        case avgPressureInch = "avgPressure_inch"
        case avgSunHour
        case maxWindSpeedMph = "maxWindSpeed_mph"
        case absMinTempF = "absMinTemp_F"
        case name
        case avgTempF = "avgTemp_F"
        case avgDailyRainfallInch = "avgDailyRainfall_inch"
        case avgHumidity
        case maxWindSpeedMS = "maxWindSpeed_ms"
        case avgMaxTempF = "avgMaxTemp_F"
        case avgWindSpeedKnots = "avgWindSpeed_knots"
        case avgWindSpeedMS = "avgWindSpeed_ms"
        case avgMonthlyRainfallInch = "avgMonthlyRainfall_inch"
        case avgCloud, avgRainDays
        case avgWindGustMph = "avgWindGust_mph"
        case absMinTemp, avgTemp
        case avgWindGustMS = "avgWindGust_ms"
        case avgVisKM = "avgVis_km"
        case absMaxTemp, avgDryDays
        case maxWindSpeedKmph = "maxWindSpeed_kmph"
        case absMaxTempF = "absMaxTemp_F"
        case avgWindSpeedKmph = "avgWindSpeed_kmph"
        case avgUVIndex
        case avgVisMiles = "avgVis_miles"
    }
}

// MARK: - CurrentCondition
struct CurrentCondition: Codable {
    let feelsLikeC, winddir16Point: String?
    let weatherDesc: [Weather]
    let pressure, tempC, feelsLikeF, uvIndex: String?
    let precipInches, visibility, pressureInches: String?
    let weatherIconURL: [Weather]?
    let humidity, visibilityMiles, observationTime, windspeedMiles: String?
    let windspeedKmph, cloudcover, precipMM, winddirDegree: String?
    let weatherCode: String?
    let tempF: String

    enum CodingKeys: String, CodingKey {
        case feelsLikeC = "FeelsLikeC"
        case winddir16Point, weatherDesc, pressure
        case tempC = "temp_C"
        case feelsLikeF = "FeelsLikeF"
        case uvIndex, precipInches, visibility, pressureInches
        case weatherIconURL = "weatherIconUrl"
        case humidity, visibilityMiles
        case observationTime = "observation_time"
        case windspeedMiles, windspeedKmph, cloudcover, precipMM, winddirDegree
        case tempF = "temp_F"
        case weatherCode
    }
}

// MARK: - Weather
struct Weather: Codable {
    let value: String
}

struct ReportError: Codable {
    let msg: String
}

// MARK: - Request
struct Request: Codable {
    let type, query: String
}

// MARK: - WeatherElement
struct WeatherElement: Codable {
    let date: String
    let maxtempC, mintempC: String

}

enum Winddir16Point: String, Codable {
    case e = "E"
    case ene = "ENE"
    case ese = "ESE"
    case n = "N"
    case ne = "NE"
    case nne = "NNE"
    case wsw = "WSW"
}
